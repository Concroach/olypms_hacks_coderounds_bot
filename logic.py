"""–õ–æ–≥–∏–∫–∞"""
import asyncio
import aiohttp
import time

from parse_olympiads import get_olympiads_updates, parse_camps, parse_codeforces_rounds, parse_leetcode, get_codechef_rounds
from parse_hackathons import add, check
from db import Database, check_class
from markup import create_olimpiads_markup, create_olimpiads_markup_for_teachers

from aiogram.utils.exceptions import BotBlocked
from loguru import logger


# db = Database()


logger.add("debug.log", format="{time} {level} {message}", filter=lambda record: record["level"].name == "DEBUG")
logger.add("info.log", format="{time} {level} {message}", filter=lambda record: record["level"].name == "INFO")
logger.add("error.log", format="{time} {level} {message}", filter=lambda record: record["level"].name == "ERROR")

"""–ü—Ä–æ–≤–µ—Ä–∫–∞"""
# –ø—Ä–æ–≤–µ—Ä–∫–∞. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–± —Å–æ–æ–±—â–µ–Ω–∏–µ
# –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø–∏—Å–∞–ª—Å—è, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –ë–î
async def send_mailing_with_check(chat_id, text, bot, db):
    try:
        await bot.send_message(chat_id=chat_id, text=text,
                    parse_mode='Markdown', disable_web_page_preview=True)
        await asyncio.sleep(0.3)
        return True
    except BotBlocked:
        with open("log_mailing.txt", 'a') as file:
            file.write(f'WARNING: it seems user with id {chat_id} blocked the bot (?)\n')
        await db.delete_user(chat_id)
        return False
    except Exception as e:
        with open("log_mailing.txt", 'a') as file:
            file.write(f'ERROR: error {e}\n')
        return True


"""–°–ø–∏—Å–∫–∏"""
# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ö–∞–∫–∞—Ç–æ–Ω–∞–º–∏
async def list_of_hacks(chat_id, bot, db):
    hacks = await db.take_hackathons()
    if len(hacks) > 0:
        for hack in hacks:
            try:
                hack = hack.replace('`', '')
                hack = hack.replace('*', '')
                hack = hack.replace('_', '')
                await bot.send_message(chat_id=chat_id, text=f"{hack}", parse_mode='Markdown', disable_web_page_preview=True)
            except Exception as e:
                logger.error(e)
    else:
        await bot.send_message(chat_id=chat_id, 
                         text="–£–≤—ã, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤. "+ \
                         "–ù–æ –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ö–∞–∫–∞—Ç–æ–Ω—ã –ø–æ—è–≤—è—Ç—Å—è - –º—ã –í–∞—Å —É–≤–µ–¥–æ–º–∏–º!")
        

# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏
async def list_of_olympiads(chat_id, bot, db):
    if await db.check_teacher_status(chat_id):
        select_markup = await create_olimpiads_markup_for_teachers()
    else:
        select_markup = await create_olimpiads_markup(chat_id, db)
    await bot.send_message(chat_id=chat_id, text="–°–ø–∏—Å–∫–∏ –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", 
                           reply_markup=select_markup)
    
    
async def show_subject_olympiads(chat_id, bot, db, subject_name):
    user_class = await db.get_user_class(chat_id)
    result = await db.take_olympiads(subject_name, user_class)
    if len(result.keys()):
        await bot.send_message(chat_id=chat_id, text=f"*{subject_name}*", 
                            parse_mode='Markdown', disable_web_page_preview=True)
    for key, value in result.items():
        await bot.send_message(chat_id=chat_id, text=value, parse_mode='Markdown', disable_web_page_preview=True)
    await list_of_olympiads(chat_id, bot, db)

    

async def list_of_camps(chat_id, bot, db):
    user_subjects = await db.get_users_subjects_names(chat_id)
    camps = await db.get_all_camps()
    if len(camps):
        mes = ""
        flag = False
        for camp in camps:
            cur_id, name, classes, subjects, site, state, link = camp
            state = state.replace('`', '')
            state = state.replace('*', '')
            state = state.replace('_', '')
            for elem in subjects.split(', '):
                if await db.get_subjects_names_from_id(elem) in user_subjects:
                    flag = True
                    mes += f"[{name}]({site})\n"
                    mes += f"{state}\n\n"
                    break
        if flag:
            await bot.send_message(chat_id=chat_id, text="*–û–ª–∏–º–ø–∏–∞–¥–Ω—ã–µ –ª–∞–≥–µ—Ä—è*", parse_mode='Markdown', disable_web_page_preview=True)
            await bot.send_message(chat_id=chat_id, text=mes, parse_mode='Markdown', disable_web_page_preview=True)
        else:
            await bot.send_message(chat_id=chat_id, text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –Ω–µ—Ç –ª–∞–≥–µ—Ä–µ–π")

async def codeforces_rounds(chat_id, bot, db):
        codeforces_rounds = await db.get_all_codeforces_rounds()
        codeforces_rounds.sort(key=lambda x: x[0])
        message = '*Codeforces-—Ä–∞—É–Ω–¥—ã*\n'
        message += f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc](https://codeforces.com/contests)' + '\n'
        for cf_round in codeforces_rounds:
            _, platform, name, date_time, registration_state = cf_round
            message += name + '\n'
            message += 'üïì ' + date_time + '\n'
            message += registration_state + '\n\n'
        if message == '*Codeforces-—Ä–∞—É–Ω–¥—ã*\n' + f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc](https://codeforces.com/contests)' + '\n':
            message = "–¢–µ–∫—É—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ –Ω–µ—Ç"
        await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown', disable_web_page_preview=True)


# –≤—ã–≤–æ–¥ codechef-—Ä–∞—É–Ω–¥–æ–≤
async def codechef_rounds(chat_id, bot, db):
    codechef = await db.get_all_codechef_rounds()
    codechef.sort(key=lambda x: int(x[2].split()[-1]))
    # print("codechef: ", codechef)
    message = '*CodeChef-—Ä–∞—É–Ω–¥—ã*\n'
    message += f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc](https://www.codechef.com/contests)' + '\n'
    for cc_round in codechef:
        name, date_time, registration_state = cc_round
        message += name + '\n'
        message += 'üïì ' + date_time + '\n'
        message += registration_state + '\n\n'
    if message == '*CodeChef-—Ä–∞—É–Ω–¥—ã*\n' + f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc](https://www.codechef.com/contests)' + '\n':
        message = "–¢–µ–∫—É—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ –Ω–µ—Ç"
    await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown', disable_web_page_preview=True)


async def leetcode_rounds(chat_id, bot, db):
    leetcode_rounds = await db.get_all_leetcode_rounds()
    message = '*LeetCode-—Ä–∞—É–Ω–¥—ã*\n\n'
    for leet_round in leetcode_rounds:
        name, date_time, registration_state = leet_round
        message += name + '\n'
        message += 'üïì ' + date_time + '\n'
        message += f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc]({registration_state})' + '\n\n'
    if message == '*LeetCode-—Ä–∞—É–Ω–¥—ã*\n\n':
        message = "–¢–µ–∫—É—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ –Ω–µ—Ç"
    await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown', disable_web_page_preview=True)
        
        
"""–†–∞—Å—Å—ã–ª–∫–∞"""
@logger.catch
async def mailing(bot, subject_names):
    logger.info("begin mailing")
    db = Database()
    await db.async_init()
    start_timestamp = time.time()
    event_messages = []
    # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ö–∞–∫–∞—Ç–æ–Ω—ã
    try:
        news = await check(db)
    except Exception as e:
        news = []
        with open("log_mailing.txt", 'a') as file:
            file.write(f"ERROR check() hackathons: {e}")
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for event in news:
        text = f"[{event['name']}]({event['link']}) \n"
        if 'place' in event:
            text += '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: ' + event['place'] + '\n'
        if '–•–∞–∫–∞—Ç–æ–Ω' in event:
            text += '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: ' + event['–•–∞–∫–∞—Ç–æ–Ω'] + '\n'
        if '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in event:
            text += '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + event['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'] + '\n'
        if '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å' in event:
            text += '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å: ' + event['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å'] + '\n'
        if '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è' in event:
            text += '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ' + event['–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'] + '\n'
        if '–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥' in event:
            text += '–ü—Ä–∏–∑: ' + event['–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥'] + '\n'
        text = text.replace('`', '')
        text = text.replace('*', '')
        text = text.replace('_', '')
        event_messages.append(text)
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ö–∞–∫–∞—Ç–æ–Ω—ã –≤ –±–¥
    try:
        await add(db)
    except Exception as e:
        with open("log_mailing.txt", 'a') as file:
            file.write(f"ERROR add() hackathons: {e}")
    # –≤ —Å–ª–æ–≤–∞—Ä–µ d —Ö—Ä–∞–Ω—è—Ç—Å—è id –æ–ª–∏–º–ø–∏–∞–¥, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–±–Ω–æ–≤–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å. –ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è - –Ω–∞–≤–∑–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    d = {}
    
    print(subject_names)
    # –ø–∞—Å—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    for sub in subject_names:
        print("subject: ", sub)
        if sub == "–ì–µ–Ω–µ—Ç–∏–∫–∞":
            continue
        try:
            d[sub] = await get_olympiads_updates(sub, db)
        except Exception as e:
            d[sub] = {"new": [], "remind": {"1": [], "3": [], "7": [],"14": []}}
            
            with open("log_mailing.txt", 'a') as file:
                file.write(f"ERROR (parse_olympiads): {e}")
    try:
        camps = await parse_camps(db)
    except Exception as e:
        camps = []
        with open("log_mailing.txt", 'a') as file:
            file.write(f"ERROR (parse_camps): {e}")
    try:
        codeforces_rounds = await parse_codeforces_rounds(db)
    except Exception as e:
        codeforces_rounds = []
        with open("log_mailing.txt", 'a') as file:
            file.write(f"ERROR (parse_codeforces): {e}")
    try:
        codechef_rounds = await get_codechef_rounds(db)
    except Exception as e:
        codechef_rounds = []
        with open("log_mailing.txt", 'a') as file:
            file.write(f"ERROR (parse_codechef): {e}")
    try:
        leetcode_rounds = await parse_leetcode(db)
    except Exception as e:
        leetcode_rounds = []
        with open("log_mailing.txt", 'a') as file:
            file.write(f"ERROR (parse_leetcode): {e}")
    await asyncio.sleep(3)
    print(d)
    
    users = await db.get_all_users()
    cnt_sent = 0
    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for chat_id in users:
        chat_id = chat_id[0]
        # —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–Ω–æ—á–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if await db.get_user_registration_status(chat_id) is True:
            # –æ–ª–∏–º–ø–∏–∞–¥–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            try:
                # await bot.send_message(chat_id=-1001928271501, text=f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id {chat_id} –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
                with open("log_mailing.txt", 'a') as file:
                    file.write(f'INFO: user with id {chat_id}: begin mailig\n')
            except Exception as e:
                print("ERROR!", e)
                # await bot.send_message(chat_id=-1001928271501, text=f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id {chat_id}: {e}')
                with open("log_mailing.txt", 'a') as file:
                    file.write(f'ERROR: user with id {chat_id}: {e}\n')
            # finally:
            #     await asyncio.sleep(0.1)
            user_subjects = await db.get_users_subjects_names(chat_id)
            if await db.get_mailing_olympiads_state(chat_id) is True:
                user_class = await db.get_user_class(chat_id)
                flag = False
                olymp_message = "*–û–ª–∏–º–ø–∏–∞–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏*\n"
                # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                for subject in user_subjects:
                    print("!!!!!")
                    print(subject)
                    print(d)
                    new_olymps = d[subject]["new"]
                    # –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if len(new_olymps):
                        arr = []
                        for el in new_olymps:
                            name = await db.get_olympiad_name_by_id(el)
                            state = await db.get_olympiad_state_by_id(el)
                            olymp_name = await db.get_olympiad_name_by_id(el)
                            classes = await db.get_olympiad_classes(olymp_name, subject)
                            site = await db.get_olympiad_site(olymp_name, subject)
                            # –¥–æ–±–∞–≤–ª—è–µ–º –æ–ª–∏–º–ø–∏–∞–¥—É –≤ —Ä–∞—Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–ª–∞—Å—Å—É
                            if await check_class(user_class, classes):
                                arr.append(f"[{name}]({site}) \n{state}")  # f"[{name}]({site}) \n"
                        if len(arr):
                            olymp_message += f"*{subject}*\n"
                            olymp_message += '\n\n'.join(arr) + "\n\n"
                if olymp_message != "*–û–ª–∏–º–ø–∏–∞–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏*\n":
                    flag_success = await send_mailing_with_check(chat_id, olymp_message, bot, db)
                    if flag_success is False:
                        with open("log_mailing.txt", 'a') as file:
                            file.write(f'INFO: user with id {chat_id}: break on olympiads\n')
                        continue

                # olymp_message = "*–ù–∞–ø–æ–º–∏–Ω–∞–µ–º:*\n"
                remind_days = (await db.get_user_remind_days(chat_id))[0][0].split()
                remind_days.sort(key=lambda x: int(x))
                for day in remind_days:
                    current_message = f"*–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {day}*\n"
                    for subject in user_subjects:
                        new_olymps = d[subject]["remind"][day]
                        # –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        if len(new_olymps):
                            arr = []
                            for el in new_olymps:
                                name = await db.get_olympiad_name_by_id(el)
                                state = await db.get_olympiad_state_by_id(el)
                                olymp_name = await db.get_olympiad_name_by_id(el)
                                classes = await db.get_olympiad_classes(olymp_name, subject)
                                site = await db.get_olympiad_site(olymp_name, subject)
                                # –¥–æ–±–∞–≤–ª—è–µ–º –æ–ª–∏–º–ø–∏–∞–¥—É –≤ —Ä–∞—Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–ª–∞—Å—Å—É
                                if await check_class(user_class, classes):
                                    arr.append(f"[{name}]({site}) \n{state}")  # f"[{name}]({site}) \n"
                            if len(arr):
                                current_message += f"*{subject}*\n"
                                current_message += '\n\n'.join(arr) + "\n\n"
                    if current_message != f"*–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {day}*\n":
                        flag_success = await send_mailing_with_check(chat_id, current_message, bot, db)
                        if flag_success is False:
                            with open("log_mailing.txt", 'a') as file:
                                file.write(f'INFO: user with id {chat_id}: break on remind olympiads\n')
                            continue
                mes = ''
                flag = False
                print("capms")
                print(camps)
                for camp in camps["new"]:
                    print("->", camp)
                    name, classes, subjects, site, state = camp
                    # flag = False
                    for elem in subjects:
                        if await db.get_subjects_names_from_id(elem) in user_subjects:
                            flag = True
                            mes += f"[{name}]({site}) \n"
                            mes += f"{state}\n\n"
                            break
                if len(remind_days):
                    for camp in camps["remind"]:
                        print("remind ->", camp)
                        name, classes, subjects, site, state = camp

                        for elem in subjects:
                            if await db.get_subjects_names_from_id(elem) in user_subjects:
                                flag = True
                                mes += f"[{name}]({site}) \n"
                                mes += f"{state}\n\n"
                                break
                if flag:
                    flag_success = await send_mailing_with_check(chat_id, "*–û–ª–∏–º–ø–∏–∞–¥–Ω—ã–µ –ª–∞–≥–µ—Ä—è*\n" +  mes, bot, db)
                    if flag_success is False:
                        with open("log_mailing.txt", 'a') as file:
                            file.write(f'INFO: user with id {chat_id}: break on camps\n')
                        continue
                else:
                    print("–ø–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
            try:
                with open("log_mailing.txt", 'a') as file:
                    file.write(f'INFO: user with id {chat_id}: olympiads sent\n')
            except Exception as e:
                print("ERROR!", e)
                with open("log_mailing.txt", 'a') as file:
                    file.write(f'ERROR: user with id: {chat_id}: {e}\n')
            # —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            if await db.get_mailing_status_of_programming(chat_id) is True:
            # —Ä–∞—Å—Å—ã–ª–∫–∞ codeforces-—Ä–∞—É–Ω–¥–æ–≤
                message = '*Codeforces-—Ä–∞—É–Ω–¥—ã*\n'
                message += f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc](https://codeforces.com/contests)' + '\n'
                for cf_round in codeforces_rounds:
                    name, date_time, registration_state = cf_round
                    message += name + '\n'
                    message += 'üïì ' + date_time + '\n'
                    message += registration_state + '\n\n'
                if message != '*Codeforces-—Ä–∞—É–Ω–¥—ã*\n' + f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc](https://codeforces.com/contests)' + '\n':
                    flag_success = await send_mailing_with_check(chat_id, message, bot, db)
                    if flag_success is False:
                        with open("log_mailing.txt", 'a') as file:
                            file.write(f'INFO: user with id {chat_id}: break on codeforces\n')
                        continue
                # —Ä–∞—Å—Å—ã–ª–∫–∞ codechef-—Ä–∞—É–Ω–¥–æ–≤
                message = '*CodeChef-—Ä–∞—É–Ω–¥—ã*\n'
                message += f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc](https://www.codechef.com/contests)' + '\n'
                for cc_round in codechef_rounds:
                    name, date_time, registration_state = cc_round
                    message += name + '\n'
                    message += 'üïì ' + date_time + '\n'
                    message += registration_state + '\n\n'
                if message != '*CodeChef-—Ä–∞—É–Ω–¥—ã*\n' + f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc](https://www.codechef.com/contests)' + '\n':
                    flag_success = await send_mailing_with_check(chat_id, message, bot, db)
                    if flag_success is False:
                        with open("log_mailing.txt", 'a') as file:
                            file.write(f'INFO: user with id {chat_id}: break on codechef\n')
                        continue
                # —Ä–∞—Å—Å—ã–ª–∫–∞ leetcode-—Ä–∞—É–Ω–¥–æ–≤
                message = '*LeetCode-—Ä–∞—É–Ω–¥—ã*\n\n'
                for leet_round in leetcode_rounds:
                    name, date_time, registration_state = leet_round
                    message += name + '\n'
                    message += 'üïì ' + date_time + '\n'
                    message += f'[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Äc]({registration_state})' + '\n\n'
                if message != '*LeetCode-—Ä–∞—É–Ω–¥—ã*\n\n':
                    flag_success = await send_mailing_with_check(chat_id, message, bot, db)
                    if flag_success is False:
                        with open("log_mailing.txt", 'a') as file:
                            file.write(f'INFO: user with id {chat_id}: break on leetcode\n')
                        continue
            try:
                with open("log_mailing.txt", 'a') as file:
                    file.write(f'INFO: user with id {chat_id}: contests sent\n')
            except Exception as e:
                print("ERROR!", e)
                with open("log_mailing.txt", 'a') as file:
                    file.write(f'ERROR: user with id {chat_id}: {e}\n')
            # —Ä–∞—Å—Å—ã–ª–∫–∞ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤
            if await db.get_mailing_hackathons_state(chat_id) is True:
                print(chat_id)
                try:
                    if len(event_messages) > 0:
                        print(chat_id)
                        a = '\n'.join(event_messages)
                        flag_success = await send_mailing_with_check(chat_id, f"*–ù–æ–≤—ã–µ —Ö–∞–∫–∞—Ç–æ–Ω—ã*\n \n{a}", bot, db)
                        if flag_success is False:
                            with open("log_mailing.txt", 'a') as file:
                                file.write(f'INFO: user with id {chat_id}: break on hackathons\n')
                            continue
                except Exception as ex:
                    print("hack", ex)
            try:
                with open("log_mailing.txt", 'a') as file:
                    file.write(f'INFO: user with id {chat_id}: everything was sent\n')
            except Exception as e:
                print("ERROR!", e)
                with open("log_mailing.txt", 'a') as file:
                    file.write(f'ERROR: user with id {chat_id}: {e}\n')
            cnt_sent += 1
    print("time: ", round(time.time() - start_timestamp, 2))
    try:
        with open("log_mailing.txt", 'a') as file:
            file.write(f'INFO: mailing is completed. To {cnt_sent} users\n')
    except Exception as e:
        print("ERROR!", e)
        with open("log_mailing.txt", 'a') as file:
            file.write(f'ERROR: user with id {chat_id}: {e}\n')
    document = open("log_mailing.txt", 'rb')
    await bot.send_document(chat_id=-1001928271501, document=document, caption="–õ–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    document.close()
    open('log_mailing.txt', 'w').close()
    await db.connection.close()


"""–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤"""
@logger.catch
async def send_logs(bot):
    try:
        document = open("info.log", 'rb')
        await bot.send_document(chat_id=-1001928271501, document=document, caption="–õ–æ–≥–∏ (info)")
        document.close()
    except Exception:
        await bot.send_message(chat_id=-1001928271501, text="–õ–æ–≥–∏ (info) - –ø—É—Å—Ç–æ")
    finally:
        open('info.log', 'w').close()

    try:
        document = open("warnings.log", 'rb')
        await bot.send_document(chat_id=-1001928271501, document=document, caption="–õ–æ–≥–∏ (warnings)")
        document.close()
    except Exception:
        await bot.send_message(chat_id=-1001928271501, text="–õ–æ–≥–∏ (warnings) - –ø—É—Å—Ç–æ")
    finally:
        open('warnings.log', 'w').close()

    try:
        document = open("error.log", 'rb')
        await bot.send_document(chat_id=-1001928271501, document=document, caption="–õ–æ–≥–∏ (errors)")
        document.close()
    except Exception:
        await bot.send_message(chat_id=-1001928271501, text="–õ–æ–≥–∏ (errors) - –ø—É—Å—Ç–æ")
    finally:
        open('error.log', 'w').close()