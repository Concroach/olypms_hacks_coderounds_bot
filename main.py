import os, csv, json
import numpy as np
from loguru import logger
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import atexit
import time
from datetime import datetime, timedelta, date
from os.path import join, dirname
from dotenv import load_dotenv
from multiprocessing import Process

import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import BotBlocked

from db import Database
from markup import * 
from middlewares import ThrottlingMiddleware, rate_limit
from logic import list_of_olympiads, list_of_camps, list_of_hacks, show_subject_olympiads
from logic import mailing, send_logs
from logic import codeforces_rounds, leetcode_rounds, codechef_rounds
from analytics import send_analytics

# —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
buttons_list = ["–û–ª–∏–º–ø–∏–∞–¥—ã", "–•–∞–∫–∞—Ç–æ–Ω—ã", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ö–æ–Ω—Ç–µ—Å—Ç—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞", 
                    "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'",
                    "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥", "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥",
                    "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤", "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤", 
                    "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", '–°–ø–∏—Å–æ–∫ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤', 
                    '–°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥', '–°–ø–∏—Å–æ–∫ –ª–∞–≥–µ—Ä–µ–π', 'Codeforces', 'CodeChef', 'LeetCode', 
                    '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã', '–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å', '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã', "–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å üîî"]


# –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å–ª—ã–∫–∏
scheduler = AsyncIOScheduler()

# –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ env.env
def get_from_env(key):
    dotenv_path = join(dirname(__file__), 'env.env')
    load_dotenv(dotenv_path)
    return os.environ.get(key)


logger.add("debug.log", format="{time} {level} {message}", filter=lambda record: record["level"].name == "DEBUG")
logger.add("info.log", format="{time} {level} {message}", filter=lambda record: record["level"].name == "INFO")
logger.add("error.log", format="{time} {level} {message}", filter=lambda record: record["level"].name == "ERROR")

TOKEN_API = 'XXXX'
storage = MemoryStorage()
bot = Bot(TOKEN_API)  # –±–æ—Ç
dp = Dispatcher(bot=bot, storage=storage)
db = Database()  # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Database() –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
logger.info("Begin")

asyncio.get_event_loop().run_until_complete(db.async_init())

# –±–µ—Ä—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
with open("analytics_data.json", 'r') as openfile:
    json_objects = json.load(openfile)
count_new_users = json_objects["count_new_users"]
prev_count_users = json_objects["prev_count_users"]
total_messages = json_objects["total_messages"]
str_prev_date = json_objects["prev_date"]
year, month, day = map(int, str_prev_date.split('-'))
prev_date = date(year, month, day)
activity_with_str_keys = json_objects["activity"]
activity = {}
for i in range(24):
    activity[i] = activity_with_str_keys[str(i)]

subject_names = asyncio.get_event_loop().run_until_complete(db.get_subject_names())  # —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
subject_names.sort()
list_subject_names = []
for elem in subject_names:
    list_subject_names.append("list_" + elem)


subject_names_for_olympiad_menu = []
for elem in subject_names:
    subject_names_for_olympiad_menu.append(elem + "_for_olympiad_menu")
    

# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.
# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
# @atexit.register
async def goodbye():
    global count_new_users, prev_count_users, total_messages, prev_date, activity
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å data
    data = {}
    data["count_new_users"] = count_new_users
    data["prev_count_users"] = prev_count_users
    data["total_messages"] = total_messages
    data["prev_date"] = prev_date
    data["activity"] = activity

    # –∑–∞–ø–∏—Å—å –≤ json
    with open("analytics_data.json", "w") as outfile:
        json.dump(data, outfile, default=str)


# –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π)
def analytics_messages(func: callable):
    async def analytics_wrapper(message):
        global prev_date, total_messages, activity

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π –¥–µ–Ω—å, –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –¥–µ–Ω—å
        # –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
        cur_date = date.today()
        if cur_date != prev_date:
            logger.info("saving data...")
            await save_analytics(prev_date)
            prev_date = cur_date

        # —Å–∞–º–∞ –ª–æ–≥–∏–∫–∞: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        total_messages += 1
        # +3 —á–∞—Å–∞, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –±—ã–ª–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        current_hour = (datetime.now().hour + 3) % 24 # datetime.now().minute
        activity[current_hour] += 1


        return await func(message)
    
    return analytics_wrapper


# –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ callback`–æ–≤
def analytics_callback(func: callable):
    async def analytics_wrapper(call):
        global prev_date, total_messages, activity
        # —Ç–∞ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        cur_date = date.today()  # datetime.now().minute
        if cur_date != prev_date:
            logger.info("saving data...")
            await save_analytics(prev_date)
            prev_date = cur_date

        # –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        total_messages += 1
        # +3 —á–∞—Å–∞, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –±—ã–ª–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        current_hour = (datetime.now().hour + 3) % 24 # datetime.now().minute
        activity[current_hour] += 1

        return await func(call)
    
    return analytics_wrapper


def analytics_message_state(func: callable):
    async def analytics_wrapper(message, state):
        global prev_date, total_messages, activity
        # —Ç–∞ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        cur_date = date.today()  # datetime.now().minute
        if cur_date != prev_date:
            logger.info("saving data...")
            await save_analytics(prev_date)
            prev_date = cur_date


        # –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        total_messages += 1
        # +3 —á–∞—Å–∞, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –±—ã–ª–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        current_hour = (datetime.now().hour + 3) % 24 # datetime.now().minute
        activity[current_hour] += 1

        return await func(message, state)
    
    return analytics_wrapper


def analytics_callback_state(func: callable):
    async def analytics_wrapper(call, state):
        global prev_date, total_messages, activity
        # —Ç–∞ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        cur_date = date.today()
        if cur_date != prev_date:
            logger.info("saving data...")
            await save_analytics(prev_date)
            prev_date = cur_date


        # –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        total_messages += 1
        # +3 —á–∞—Å–∞, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –±—ã–ª–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        current_hour = (datetime.now().hour + 3) % 24 # datetime.now().minute
        activity[current_hour] += 1

        return await func(call, state)
    
    return analytics_wrapper


async def save_analytics(today_date):
    global count_new_users, prev_count_users, total_messages, activity
    # —à–∞–ø–∫–∞
    fieldnames = ['date', 'count_users', 'new_users', 'deleted_users', "total_messages"]
    for i in range(24):
        fieldnames.append(f"activity_{i}")
    # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ csv —Ñ–∞–π–ª
    with open("analytics.csv", "a", newline='') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        
        # writer.writeheader() # –∑–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–∫–∞
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
        row = {}
        row["date"] = today_date
        all_users = await db.get_all_users()
        row["count_users"] = len(all_users)
        row['new_users'] = count_new_users
        # –∫–æ–ª-–≤–æ –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è - —ç—Ç–æ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å + –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–π –≤ –±–¥ 
        row["deleted_users"] = prev_count_users + count_new_users - len(all_users)
        prev_count_users = len(all_users)
        row["total_messages"] = total_messages
        for i in range(24):
            row[f"activity_{i}"] = activity[i]
        writer.writerow(row)

    # –æ–±–Ω—É–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    count_new_users = 0
    total_messages = 0
    for i in range(24):
        activity[i] = 0


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/start'
@dp.message_handler(commands=['start'])
@rate_limit(10, 'start')
@analytics_messages
async def start(message):
    chat_id = message.chat.id
    username = f'@{message.chat.username}'
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥ - –æ–Ω –Ω–æ–≤—ã–π, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ. –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    res = await db.user_exists(chat_id)
    if res:
        await bot.send_message(chat_id=message.chat.id, 
                         text="–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=await create_main_menu())
    else:
        # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        global count_new_users
        count_new_users += 1
        await bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ–π–¥–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        await db.add_user_id(chat_id, username)
        markup = await create_class_markup(chat_id)
        await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å", reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
@dp.callback_query_handler(lambda call: call.data in ["8", "9", "10", "11", "–ù–µ —à–∫–æ–ª—å–Ω–∏–∫", "–£—á–∏—Ç–µ–ª—å"])
@analytics_callback
async def class_callback(call):
    cl = call.data
    chat_id = call.from_user.id
    user_status = await db.get_user_registration_status(chat_id)
    if user_status:
        if cl != "–£—á–∏—Ç–µ–ª—å":
            await db.add_class(chat_id, cl)
            if cl == "–ù–µ —à–∫–æ–ª—å–Ω–∏–∫":
                await db.add_status_to_teacher(chat_id, False)
                await db.update_user_mailing_olympiads(chat_id, False)
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                    text=f'''‚úÖ *–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã!*\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {await db.get_class_for_registration_is_done(chat_id)}''', parse_mode='Markdown')
            else:
                if await db.check_flag_teachers_searching(chat_id):
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                        text=f'''‚úÖ *–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã!*\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {await db.get_class_for_registration_is_done(chat_id)}\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {await db.get_subs_for_registration_is_done(chat_id)}''', reply_markup=None, parse_mode='Markdown')
                    await db.change_flag_teachers_searching(chat_id, False)
                else:
                    await db.add_status_to_teacher(chat_id, False)
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                        text=f'''‚úÖ *–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã!*\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {await db.get_class_for_registration_is_done(chat_id)}\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {await db.get_subs_for_registration_is_done(chat_id)}''', reply_markup=None, parse_mode='Markdown')
        else:
            await db.del_user_class(chat_id)
            await db.add_status_to_teacher(chat_id, True)
            markup = await create_class_markup_for_teacher(chat_id)
            await db.change_flag_teachers_searching(chat_id, True)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞–≤–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—ã", reply_markup=markup, parse_mode='Markdown')
    else:
        if cl != "–£—á–∏—Ç–µ–ª—å":
            if cl == "–ù–µ —à–∫–æ–ª—å–Ω–∏–∫":
                await db.add_class(chat_id, cl)
                await db.update_user_mailing_olympiads(chat_id, False)
                markup = await create_mailing_menu(chat_id)
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–∏–º —Ä–∞–∑–¥–µ–ª–∞–º –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=markup)
            else:
                if db.check_teacher_status(chat_id):
                    await db.add_class(chat_id, cl)
                    markup = await create_subjects_markup(chat_id, subject_names)
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã *(–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 5)*, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", reply_markup=markup, parse_mode='Markdown')
                else:
                    markup = await create_subjects_markup(chat_id, subject_names)
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                                    text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã *(–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 5)*", reply_markup=markup, parse_mode='Markdown')
        else:
            await db.add_status_to_teacher(chat_id, True)
            markup = await create_class_markup_for_teacher(chat_id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞–≤–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—ã", reply_markup=markup, parse_mode='Markdown')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
@dp.callback_query_handler(lambda call: call.data in subject_names)
@analytics_callback
async def subjects_callback(call):
    subj = call.data
    chat_id = call.from_user.id
    subj_id = await db.get_subjects_id(subj)
    flag = await db.add_del_sub(chat_id, subj_id)  # True - –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, False - –Ω–µ—Ç
    markup = await create_subjects_markup(chat_id, subject_names)
    if flag is True:
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    else:
        await bot.answer_callback_query(callback_query_id=call.id, text='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: 5')


@dp.callback_query_handler(lambda call: call.data in subject_names_for_olympiad_menu)
@analytics_callback
async def subjects_callback_for_olympiad_menu(call):
    subj = call.data.split('_')[0]
    chat_id = call.from_user.id
    subj_id = await db.get_subjects_id(subj)
    flag = await db.add_del_sub(chat_id, subj_id)  # True - –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, False - –Ω–µ—Ç
    markup = await create_subjects_markup_for_olympiads_menu(chat_id, subject_names)
    if flag is True:
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    else:
        await bot.answer_callback_query(callback_query_id=call.id, text='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: 5')


@dp.callback_query_handler(lambda call: call.data.startswith("day_"))
@analytics_callback
async def remind_callback(call):
    day = call.data.split('_')[1]
    chat_id = call.from_user.id
    user_days = await db.get_user_remind_days(chat_id)
    str_days = user_days[0][0]
    list_days = str_days.split()
    if day not in list_days:
        list_days.append(day)
    else:
        list_days.remove(day)
    new_str = ' '.join(list_days)
    await db.update_user_remind_days(chat_id, new_str)
    markup = await create_remind_markup(chat_id)
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data.startswith("registration_day_"))
@analytics_callback
async def remind_callback(call):
    day = call.data.split('_')[-1]
    chat_id = call.from_user.id
    user_days = await db.get_user_remind_days(chat_id)
    str_days = user_days[0][0]
    list_days = str_days.split()
    if day not in list_days:
        list_days.append(day)
    else:
        list_days.remove(day)
    new_str = ' '.join(list_days)
    print(day, user_days, str_days, list_days, new_str) 
    await db.update_user_remind_days(chat_id, new_str)
    markup = await create_remind_markup_for_registration(chat_id)
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–æ–≤ –æ–ª–∏–º–ø–∏–∞–¥
@dp.callback_query_handler(lambda call: call.data in list_subject_names)
@analytics_callback
async def subjects_callback_for_output_list_of_olympiads(call):
    subj = call.data
    chat_id = call.from_user.id
    await bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.message_id,
                                text=f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subj[5:]}")
    await show_subject_olympiads(chat_id, bot, db, subj[5:])


# –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda call: call.data == 'done')
@analytics_callback
async def registration_is_done_callback(call):
    chat_id = call.message.chat.id
     
    user_subjects = await db.get_subs_for_registration_is_done(chat_id)
    user_status = await db.get_user_registration_status(chat_id)
    user_class = await db.get_class_for_registration_is_done(chat_id)
    if not user_status:
        markup = await create_mailing_menu(chat_id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–∏–º —Ä–∞–∑–¥–µ–ª–∞–º –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=markup)
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                        text=f'‚úÖ *–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã!*\n' + \
                            f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {user_class}\n' + \
                            f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {user_subjects}', parse_mode='Markdown')
        

@dp.callback_query_handler(lambda call: call.data == 'callback_end_registration')
@analytics_callback
async def select_remind_end_callback(call):
    chat_id = call.message.chat.id
    user_subjects = await db.get_subs_for_registration_is_done(chat_id)
    main_menu = await create_main_menu()
    user_class = await db.get_class_for_registration_is_done(chat_id)
    current_class = await db.get_class(chat_id, "–ù–µ —à–∫–æ–ª—å–Ω–∏–∫")
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                        text=f'*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞.*\n' + \
                            f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {user_class}\n' + \
                            f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {user_subjects}',
                        parse_mode='Markdown')
    if await db.check_teacher_status(chat_id):
        await bot.send_message(chat_id=call.message.chat.id, 
                        text='–¢–µ–ø–µ—Ä—å –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏ –∏ —Ö–∞–∫–∞—Ç–æ–Ω–∞–º–∏. –£—Å–ø–µ—Ö–æ–≤ –í–∞–º –∏ –≤–∞—à–∏–º —É—á–µ–Ω–∏–∫–∞–º!',
                        reply_markup=main_menu)
    else:
        if current_class: 
            await bot.send_message(chat_id=call.message.chat.id, 
                text='–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ö–∞–∫–∞—Ç–æ–Ω–∞–º–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –£—Å–ø–µ—Ö–æ–≤!',
                reply_markup=main_menu)   
        else:
            await bot.send_message(chat_id=call.message.chat.id, 
                            text='–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏ –∏ —Ö–∞–∫–∞—Ç–æ–Ω–∞–º–∏. –£—Å–ø–µ—Ö–æ–≤!',
                            reply_markup=main_menu)
    await db.end_user_registration(call.message.chat.id)
        
        
@dp.callback_query_handler(lambda call: call.data == 'done_from_olympiad_menu')
@analytics_callback
async def registration_is_done_from_olympiad_menu_callback(call):
    chat_id = call.message.chat.id
     
    user_subjects = await db.get_subs_for_registration_is_done(chat_id)
    user_class = await db.get_class_for_registration_is_done(chat_id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                text=f'‚úÖ *–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã!*\n' + \
                    f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {user_class}\n' + \
                    f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {user_subjects}', parse_mode='Markdown')
    await list_of_olympiads(chat_id, bot, db)

    
@dp.callback_query_handler(lambda call: call.data in ["–û–ª–∏–º–ø–∏–∞–¥—ã", "–•–∞–∫–∞—Ç–æ–Ω—ã", "–ò–≤–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é", "–ì–æ—Ç–æ–≤–æ"])
@analytics_callback
async def mailing_callback(call):
    mailing = call.data
    chat_id = call.from_user.id
    message_id = call.message.message_id
    current_class = await db.get_class(chat_id, "–ù–µ —à–∫–æ–ª—å–Ω–∏–∫")
    if mailing == "–û–ª–∏–º–ø–∏–∞–¥—ã":
        if current_class:
            await bot.answer_callback_query(callback_query_id=call.id, text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥')
        else:
            current_mailing_status = await db.get_mailing_olympiads_state(chat_id)
            if current_mailing_status:
                await db.update_user_mailing_olympiads(chat_id, False)
            else:
                await db.update_user_mailing_olympiads(chat_id, True)
            
    if mailing == "–•–∞–∫–∞—Ç–æ–Ω—ã":
        current_mailing_status = await db.get_mailing_hackathons_state(chat_id)
        if current_mailing_status:
            await db.update_user_mailing_hackathons(chat_id, False)
        else:
            await db.update_user_mailing_hackathons(chat_id, True)
            
    if mailing == "–ò–≤–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é":
        current_mailing_status = await db.get_mailing_status_of_programming(chat_id)
        if current_mailing_status:
            await db.update_user_mailing_programming(chat_id, False)
        else:
            await db.update_user_mailing_programming(chat_id, True)
            
    if mailing == "–ì–æ—Ç–æ–≤–æ":
        if await db.get_mailing_olympiads_state(chat_id):
            markup = await create_remind_markup_for_registration(chat_id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö.\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å—Ä–∞–∑—É –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':", reply_markup=markup)
        else:
            user_subjects = await db.get_subs_for_registration_is_done(chat_id)
            main_menu = await create_main_menu()
            user_class = await db.get_class_for_registration_is_done(chat_id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f'*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞.*\n' + \
                                    f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {user_class}\n' + \
                                    f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {user_subjects}',
                                parse_mode='Markdown')
            if await db.check_teacher_status(chat_id):
                await bot.send_message(chat_id=call.message.chat.id, 
                                text='–¢–µ–ø–µ—Ä—å –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏ –∏ —Ö–∞–∫–∞—Ç–æ–Ω–∞–º–∏. –£—Å–ø–µ—Ö–æ–≤ –í–∞–º –∏ –≤–∞—à–∏–º —É—á–µ–Ω–∏–∫–∞–º!',
                                reply_markup=main_menu)
            else:
                if current_class: 
                    await bot.send_message(chat_id=call.message.chat.id, 
                        text='–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ö–∞–∫–∞—Ç–æ–Ω–∞–º–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –£—Å–ø–µ—Ö–æ–≤!',
                        reply_markup=main_menu)   
                else:
                    await bot.send_message(chat_id=call.message.chat.id, 
                                    text='–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏ –∏ —Ö–∞–∫–∞—Ç–æ–Ω–∞–º–∏. –£—Å–ø–µ—Ö–æ–≤!',
                                    reply_markup=main_menu)
            await db.end_user_registration(call.message.chat.id)
    else:
        markup = await create_mailing_menu(chat_id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–∏–º —Ä–∞–∑–¥–µ–ª–∞–º –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=markup)


class SupportStates(StatesGroup):
    deal = State()
    mail_choose_subjects = State()
    mail = State()


@dp.message_handler(regexp='–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', content_types=['text'])
@rate_limit(5, 'text6')
@analytics_messages
async def support_handler(message: types.Message):
    result = await db.check_ban(message.chat.id)
    if not len(result):
        await SupportStates.deal.set()
        await message.reply("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ", reply_markup=await create_cancel_markup())
    else:
        new_menu = await create_main_menu()
        await message.reply("–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É", reply_markup=new_menu)


@dp.callback_query_handler(lambda call: call.data in ["cancel"], state=SupportStates.deal)
@analytics_callback_state
async def cancel_button_in_ts(call, state):
    chat_id = call.message.chat.id
    msg_id = call.message.message_id
    await bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text='‚òëÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=SupportStates.deal, content_types=types.ContentTypes.ANY)
@analytics_message_state
async def process_support_message(message: types.Message, state: FSMContext):
    if message.text in buttons_list:
        new_menu = await create_main_menu()
        await message.answer("üòâ –ü–æ–Ω–∏–º–∞–µ–º, —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª–∏, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=new_menu)
    else:
        if message.content_type == 'photo':
            photo_id = message.photo[-1].file_id
            photo = await bot.get_file(photo_id)
            text = f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{message.caption}\n–û—Ç–≤–µ—Ç–∏—Ç—å: `/answer_ts {message.chat.id}`\n–ó–∞–±–∞–Ω–∏—Ç—å: `/ban {message.chat.id}` '
            await bot.send_photo(chat_id=-1001928271501, photo=photo.file_id, caption=text, parse_mode="MARKDOWN")
        elif message.content_type == 'video':
            video_id = message.video.file_id
            video = await bot.get_file(video_id)
            text = f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{message.caption}\n–û—Ç–≤–µ—Ç–∏—Ç—å: `/answer_ts {message.chat.id}`\n–ó–∞–±–∞–Ω–∏—Ç—å: `/ban {message.chat.id}` '
            await bot.send_video(chat_id=-1001928271501, video=video.file_id, caption=text, parse_mode="MARKDOWN")
        else:
            text = f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{message.text}\n–û—Ç–≤–µ—Ç–∏—Ç—å: `/answer_ts {message.chat.id}`\n–ó–∞–±–∞–Ω–∏—Ç—å: `/ban {message.chat.id}` '
            await bot.send_message(chat_id=-1001928271501, text=text, parse_mode="MARKDOWN")
        new_menu = await create_main_menu()
        await message.answer("‚úâÔ∏è‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ", reply_markup=new_menu)
    await state.finish()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@dp.message_handler(regexp='–û–ª–∏–º–ø–∏–∞–¥—ã|–•–∞–∫–∞—Ç–æ–Ω—ã|–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ|–ö–æ–Ω—Ç–µ—Å—Ç—ã|–ù–∞—Å—Ç—Ä–æ–π–∫–∏|–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é \'–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\'|–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥|–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥|–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤|–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤|–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É|–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', content_types=['text'])
@analytics_messages
async def change_menu(message):
    if message.text in buttons_list:
        new_menu = None  # –Ω–æ–≤–æ–µ –º–µ–Ω—é
        if message.text == "–û–ª–∏–º–ø–∏–∞–¥—ã":
            user_class = await db.get_class_for_registration_is_done(message.chat.id)
            if user_class == '–ù–µ —à–∫–æ–ª—å–Ω–∏–∫':
                await bot.send_message(chat_id=message.chat.id, text="‚ùå –†–∞–∑–¥–µ–ª –æ–ª–∏–º–ø–∏–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏\" ‚û°Ô∏è \"–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å\"", parse_mode='Markdown')
            else:
                new_menu = await create_olympiads_menu(message.chat.id)
        elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥":
            await db.update_user_mailing_olympiads(message.chat.id, False)
            new_menu = await create_olympiads_menu(message.chat.id)
        elif message.text == "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥":
            await db.update_user_mailing_olympiads(message.chat.id, True)
            new_menu = await create_olympiads_menu(message.chat.id)
        elif message.text == "–•–∞–∫–∞—Ç–æ–Ω—ã":
            new_menu = await create_hackathons_menu(message.chat.id)
        elif message.text == "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ":
            new_menu = await create_prog_menu(message.chat.id)
        elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            await db.update_user_mailing_programming(message.chat.id, False)
            new_menu = await create_prog_menu(message.chat.id)
        elif message.text == "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            await db.update_user_mailing_programming(message.chat.id, True)
            new_menu = await create_prog_menu(message.chat.id)
        elif message.text == "–ö–æ–Ω—Ç–µ—Å—Ç—ã":
            new_menu = await create_training_menu(message.chat.id)
        elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤":
            await db.update_user_mailing_hackathons(message.chat.id, False)
            new_menu = await create_hackathons_menu(message.chat.id)
        elif message.text == "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤":
            await db.update_user_mailing_hackathons(message.chat.id, True)
            new_menu = await create_hackathons_menu(message.chat.id)
        elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            new_menu = await create_settings_menu()
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'":
            new_menu = await create_prog_menu(message.chat.id)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            new_menu = await create_main_menu()
        user_class = await db.get_class_for_registration_is_done(message.chat.id)
        if user_class != '–ù–µ —à–∫–æ–ª—å–Ω–∏–∫':
            await bot.send_message(chat_id=message.chat.id, text=menu_answers[message.text], reply_markup=new_menu)
            if message.text == "–û–ª–∏–º–ø–∏–∞–¥—ã":
                await list_of_olympiads(message.chat.id, bot, db)
        else:
            if message.text != '–û–ª–∏–º–ø–∏–∞–¥—ã':
                await bot.send_message(chat_id=message.chat.id, text=menu_answers[message.text], reply_markup=new_menu)    


@dp.message_handler(regexp='–°–ø–∏—Å–æ–∫ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤', content_types=['text'])
@rate_limit(10, 'text2')
@analytics_messages
async def list_h(message):
    if message.text == "–°–ø–∏—Å–æ–∫ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤":
        markup = await create_hackathons_menu(message.chat.id)
        await bot.send_message(chat_id=message.chat.id, text="–°–ø–∏—Å–æ–∫ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤", reply_markup=markup)
        await list_of_hacks(message.chat.id, bot, db)


@dp.message_handler(regexp='–°–ø–∏—Å–æ–∫ –ª–∞–≥–µ—Ä–µ–π', content_types=['text'])
@rate_limit(10, '–°–ø–∏—Å–æ–∫ –ª–∞–≥–µ—Ä–µ–π')
@analytics_messages
async def list_ol(message):
    if message.text == "–°–ø–∏—Å–æ–∫ –ª–∞–≥–µ—Ä–µ–π":
        markup = await create_olympiads_menu(message.chat.id)
        await bot.send_message(chat_id=message.chat.id, text="–°–ø–∏—Å–æ–∫ –ª–∞–≥–µ—Ä–µ–π", reply_markup=markup)
        await list_of_camps(message.chat.id, bot, db)


@dp.message_handler(regexp='Codeforces', content_types=['text'])
@rate_limit(4, 'Codeforces')
@analytics_messages
async def list_codeforces(message):
    if message.text == "Codeforces":
        await codeforces_rounds(message.chat.id, bot, db)


@dp.message_handler(regexp='CodeChef', content_types=['text'])
@rate_limit(4, 'CodeChef')
@analytics_messages
async def list_codeforces(message):
    if message.text == "CodeChef":
        markup = await create_prog_menu(message.chat.id)
        await codechef_rounds(message.chat.id, bot, db)


@dp.message_handler(regexp='LeetCode', content_types=['text'])
@rate_limit(4, 'LeetCode')
@analytics_messages
async def list_leetcode(message):
    if message.text == "LeetCode":
        await leetcode_rounds(message.chat.id, bot, db)


@dp.message_handler(regexp='–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–ª–∏–º–ø–∏', content_types=['text'])
@rate_limit(4, 'text101')
@analytics_messages
async def list_international_ol(message):
    if message.text == "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–ª–∏–º–ø–∏a–¥—ã":
        text = '*–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã*\n*1. Advent of Code*\n–≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å 1 –ø–æ 25 –¥–µ–∫–∞–±—Ä—è\n–û–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 25 —Ä–∞—É–Ω–¥–æ–≤, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞ —Å–∞–π—Ç–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–∞–¥–∞–Ω–∏–µ, –∫—Ç–æ –±–æ–ª—å—à–µ —Ä–µ—à–∏–ª, —Ç–æ—Ç –∏ –ø–æ–±–µ–¥–∏–ª\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å](https://hpecodewars.org/)\n\n*2. ICFP Programming Contest*\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–π–¥–µ—Ç —Å 4 –ø–æ 9 —Å–µ–Ω—Ç—Ä—è–±—Ä—è 2023\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å](https://web.cvent.com/event/db55e0d8-c55e-429d-8c04-01bd48913fdc/summary)\n\n*3. Microsoft Imagine Cup Junior 2024*\n–î–ª—è –¥–µ—Ç–µ–π –æ—Ç 13 –¥–æ 18 –ª–µ—Ç\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 12 —è–Ω–≤–∞—Ä—è - 14 –º–∞—è 2024\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å](https://imaginecup.microsoft.com/ru-ru/junior)\n\n*4. Microsoft - Imagine Cup 2024*\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–µ—Ç–æ–º.\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å](https://imaginecup.microsoft.com/category/register/27)\n\n*5. CodeWars 2024*\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–π–¥–µ—Ç –≤ —Å—É–±–±–æ—Ç—É 2 –º–∞—Ä—Ç–∞ 2024\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å](https://hpecodewars.org/)'
        await bot.send_message(chat_id=message.chat.id, text=text, parse_mode='MARKDOWN', disable_web_page_preview=True)
        
        
@dp.message_handler(regexp='–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å', content_types=['text'])
@rate_limit(5, 'text4')
@analytics_messages
async def change_cl(message):
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å":
        markup = await create_class_markup(message.chat.id)
        await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å", reply_markup=markup)
        
        
@dp.message_handler(regexp='–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã', content_types=['text'])
@rate_limit(5, 'text5')
@analytics_messages
async def change_subs(message):    
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã":
        user_class = await db.get_class_for_registration_is_done(message.chat.id)
        if user_class == '–ù–µ —à–∫–æ–ª—å–Ω–∏–∫':
            await bot.send_message(chat_id=message.chat.id, text="‚ùå –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å\"", parse_mode='Markdown')
        else:
            markup = await create_subjects_markup(message.chat.id, subject_names)
            await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, *(–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 5)*", reply_markup=markup, parse_mode='Markdown')


# –ø–µ—Ä–≤–∞—è e - –∞–Ω–≥–ª–∏–π—Å–∫–∞—è
@dp.message_handler(regexp='–ò–∑–ºe–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã', content_types=['text'])
@rate_limit(5, 'text5')
@analytics_messages
async def change_subs_for_teacher_in_olympiad_menu(message):    
    if message.text == "–ò–∑–ºe–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã":
        markup = await create_subjects_markup_for_olympiads_menu(message.chat.id, subject_names)
        await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, *(–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 5)*", reply_markup=markup, parse_mode='Markdown')
   
            
# –ø–µ—Ä–≤–∞—è e - –∞–Ω–≥–ª–∏–π—Å–∫–∞—è
@dp.message_handler(regexp='–ò–∑–ºe–Ω–∏—Ç—å –∫–ª–∞—Å—Å', content_types=['text'])
@rate_limit(5, 'text5')
@analytics_messages
async def change_class(message):    
    if message.text == "–ò–∑–ºe–Ω–∏—Ç—å –∫–ª–∞—Å—Å":
        await db.change_flag_teachers_searching(message.chat.id, True)
        markup = await create_class_markup_for_teacher(message.chat.id)
        await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å", reply_markup=markup, parse_mode='Markdown')


@dp.message_handler(regexp='–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å üîî', content_types=['text'])
@rate_limit(5, 'text_remind')
@analytics_messages
async def change_cl(message):
    if message.text == "–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å üîî":
        if await db.get_mailing_olympiads_state(message.chat.id):
            markup = await create_remind_markup(message.chat.id)
            await bot.send_message(chat_id=message.chat.id, text="–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ?", reply_markup=markup)
        else:
            await bot.send_message(chat_id=message.chat.id, text="–í–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

"""–ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ —Ç–ø"""
@dp.message_handler(commands=['help'])
async def send_help_command(message):
        await message.reply("""–ö–æ–º–∞–Ω–¥—ã:\n- /mail - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º.(all - –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, not_reg - —Ç–æ–ª—å–∫–æ –∫—Ç–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n- /answer_ts - –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–æ–º–∞–Ω–¥–∞, user_id –∏ —Å–∞–º –æ—Ç–≤–µ—Ç (–ø—Ä–∏–º–µ—Ä: /answer_ts 123456 –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É bot@bot) \n- /ban - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.\n–°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–æ–º–∞–Ω–¥–∞, user_id –∏ –ø—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞ (–ø—Ä–∏–º–µ—Ä: /ban 123456 –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ —Ç–µ–º–µ)\n- /unban - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.\n–°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–æ–º–∞–Ω–¥–∞ –∏ user_id —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: /unban 123456)\n- /get_analytics - –ø–æ–ª—É—á–µ–Ω–∏–µ pdf-—Ñ–∞–π–ª–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n- /get_logs - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤\n- /get_now_analytics - —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n- /get_subjects_count - —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç\n- /save_users - –∫–æ–ø–∏—è user –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö""")


@dp.message_handler(commands=['mail'])
async def func_begin_mail(message):
    if message.chat.id == -1001928271501:
        await SupportStates.mail_choose_subjects.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é(–µ—Å–ª–∏ –Ω–∞–¥–æ –≤—Å–µ, –≤–≤–µ–¥–∏—Ç–µ all. –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - not_reg)")


@dp.message_handler(commands=['answer_ts'])
async def answer_from_ts(message):
    if message.chat.id == -1001928271501:
        command, chat_id, *text = message.text.split()
        text = ' '.join(text)
        msg = f'üßë‚Äçüíª –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n{text}\n‚ù§Ô∏è–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!'
        await bot.send_message(chat_id=chat_id, text=msg)


@dp.message_handler(commands=['ban'])
async def ban_user_in_ts(message):
    if message.chat.id == -1001928271501:
        command, chat_id, *text = message.text.split()
        text = ' '.join(text)
        await db.ban_user(chat_id, text)
        msg = "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
        await bot.send_message(chat_id=chat_id, text=msg)


@dp.message_handler(commands=['unban'])
async def unban_user_in_ts(message):
    if message.chat.id == -1001928271501:
        command, chat_id = message.text.split()
        await db.unban_user(chat_id)
        msg = "–í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
        await bot.send_message(chat_id=chat_id, text=msg)


@dp.message_handler(commands=['get_analytics'])
async def func_analytics(message):
    if message.chat.id == -1001928271501:
        await send_analytics(bot, db)


@dp.message_handler(commands=['get_now_analytics'])
async def func_now_analytic(message):
    if message.chat.id == -1001928271501:
        global count_new_users, total_messages, activity
        message = "*–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ*\n"
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥: {len(await db.get_all_users())}\n"
        message += f"–ó–∞–≤–µ—Ä—à–∏–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {len(await db.get_users_ended_registration())}\n"
        message += f"–ù–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {len(await db.get_users_not_ended_registration())}\n"
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_new_users}\n"
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        message += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å–∞–º:\n"
        for i in range(24):
            message += f"{i}: {activity[i]}\n"
        await bot.send_message(chat_id=-1001928271501, text=message, parse_mode="MARKDOWN")


@dp.message_handler(commands=['get_logs'])
async def func_logs(message):
    if message.chat.id == -1001928271501:
        await send_logs(bot)


@dp.message_handler(commands=['get_subjects_count'])
async def admin_state(message):
    if message.chat.id == -1001928271501:
        d_subjects = {}
        all_subjects_names = await db.get_subject_names()
        for elem in all_subjects_names:
            if elem == "–ì–µ–Ω–µ—Ç–∏–∫–∞":
                continue
            d_subjects[elem] = 0
        
        all_users = await db.get_all_users()
        for user in all_users:
            user_subs = await db.get_users_subjects_names(user[0])
            for sub in user_subs:
                d_subjects[sub] += 1
        keys = list(d_subjects.keys())
        values = list(d_subjects.values())
        tups = []
        for i in range(len(keys)):
            tups.append((keys[i], values[i]))
        tups.sort(key=lambda x: x[1], reverse=True)
        message = ''
        for tup in tups:
            message += f"{tup[0]}: {tup[1]}\n"
        await bot.send_message(chat_id=-1001928271501, text=message, parse_mode="MARKDOWN")


@dp.message_handler(state=SupportStates.mail_choose_subjects, content_types=types.ContentTypes.ANY)
async def process_subjects(message: types.Message, state: FSMContext):
    if message.chat.id == -1001928271501:
        await state.update_data({"subjects": message.text})
        await SupportStates.mail.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")


@dp.message_handler(state=SupportStates.mail, content_types=types.ContentTypes.ANY)
async def process_support_message(message: types.Message, state: FSMContext):
    if message.chat.id == -1001928271501:
        data = await state.get_data()
        subjects = data.get("subjects").split(',')
        for i in range(len(subjects)):
            subjects[i] = subjects[i].strip().capitalize()
        file = open('log_mail.txt', 'w')
        cnt = 0
        if message.content_type == 'photo':
            photo_id = message.photo[-1].file_id
            photo = await bot.get_file(photo_id)
            for i in await db.get_all_users():
                for j in i:
                    if subjects[0].lower() == "all":
                        try:
                            await bot.send_photo(chat_id=j, photo=photo.file_id, caption=message.caption, parse_mode="MARKDOWN")
                            file.write(f'sent photo to user with id {j}\n')
                            cnt += 1
                            await asyncio.sleep(0.5)
                        except BotBlocked:
                            await db.delete_user(j)
                            file.write(f'user with id {j} blocked the bot. user was deleted from db\n')
                        except Exception as e:
                            file.write(f"{e}\n")
                    else:
                        user_subjects = await db.get_users_subjects_names(j)
                        for sub in subjects:
                            if sub in user_subjects:
                                try:
                                    await bot.send_photo(chat_id=j, photo=photo.file_id, caption=message.caption, parse_mode="MARKDOWN")
                                    file.write(f'sent photo to user with id {j}\n')
                                    cnt += 1
                                    await asyncio.sleep(0.5)
                                except BotBlocked:
                                    await db.delete_user(j)
                                    file.write(f'user with id {j} blocked the bot. user was deleted from db\n')
                                except Exception as e:
                                    file.write(f"{e}\n")
                                break
        elif message.content_type == 'video':
            video_id = message.video.file_id
            video = await bot.get_file(video_id)
            for i in await db.get_all_users():
                for j in i:
                    if subjects[0].lower() == "all":
                        try:
                            await bot.send_video(chat_id=j, video=video.file_id, caption=message.caption, parse_mode="MARKDOWN")
                            file.write(f'sent video to user with id {j}\n')
                            cnt += 1
                            await asyncio.sleep(0.5)
                        except BotBlocked:
                            await db.delete_user(j)
                            file.write(f'user with id {j} blocked the bot. user was deleted from db\n')
                        except Exception as e:
                            file.write(f"{e}\n")
                    else:
                        user_subjects = await db.get_users_subjects_names(j)
                        for sub in subjects:
                            if sub in user_subjects:
                                try:
                                    await bot.send_video(chat_id=j, video=video.file_id, caption=message.caption, parse_mode="MARKDOWN")
                                    file.write(f'sent video to user with id {j}\n')
                                    cnt += 1
                                    await asyncio.sleep(0.5)
                                except BotBlocked:
                                    await db.delete_user(j)
                                    file.write(f'user with id {j} blocked the bot. user was deleted from db\n')
                                except Exception as e:
                                    file.write(f"{e}\n")
                                break
        else:
            for i in await db.get_all_users():
                for j in i:
                    if subjects[0].lower() == "all":
                        try:
                            await bot.send_message(chat_id=j, text=message.text, parse_mode="MARKDOWN")
                            file.write(f'sent message to user with id {j}\n')
                            cnt += 1
                            await asyncio.sleep(0.5)
                        except BotBlocked:
                            await db.delete_user(j)
                            file.write(f'user with id {j} blocked the bot. user was deleted from db\n')
                        except Exception as e:
                            file.write(f"{e}\n")
                    elif subjects[0].lower() == "not_reg" and (await db.get_user_registration_status(j) is False):
                        try:
                            await bot.send_message(chat_id=j, text=message.text, parse_mode="MARKDOWN")
                            file.write(f'sent message to user with id {j}\n')
                            cnt += 1
                            await asyncio.sleep(0.5)
                        except BotBlocked:
                            await db.delete_user(j)
                            file.write(f'user with id {j} blocked the bot. user was deleted from db\n')
                        except Exception as e:
                            file.write(f"{e}\n")
                    else:
                        user_subjects = await db.get_users_subjects_names(j)
                        for sub in subjects:
                            if sub in user_subjects:
                                try:
                                    await bot.send_message(chat_id=j, text=message.text, parse_mode="MARKDOWN")
                                    file.write(f'sent message to user with id {j}\n')
                                    cnt += 1
                                    await asyncio.sleep(0.5)
                                except BotBlocked:
                                    await db.delete_user(j)
                                    file.write(f'user with id {j} blocked the bot. user was deleted from db\n')
                                except Exception as e:
                                    file.write(f"{e}\n")
                                break
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        file.write(f"Sent to {cnt} users")
        file.close()
        document = open("log_mail.txt", 'rb')
        await bot.send_document(chat_id=-1001928271501, document=document, caption="–õ–æ–≥–∏ mail")
        document.close()
        open('log_mail.txt', 'w').close()
        await state.finish()


# —Å–ª–µ–¥—É—é—â–∏–µ 3 —Ñ—É–Ω–∫—Ü–∏–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∞
async def save_users():
    res = await db.get_all_users_info()
    with open('users_info.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(res)


@dp.message_handler(commands=['save_users'])
async def send_users(message):
    if message.chat.id == -1001928271501:
        await save_users()
        document = open("users_info.csv", 'rb')
        await bot.send_document(chat_id=-1001928271501, document=document, caption="users_info")
        document.close()
        open('users_info.csv', 'w').close()


async def send_users_everyweek():
    await save_users()
    document = open("users_info.csv", 'rb')
    await bot.send_document(chat_id=-1001928271501, document=document, caption="users_info")
    document.close()
    open('users_info.csv', 'w').close()


@dp.message_handler(content_types=['text'])
@analytics_messages
async def trash_msg(message):
    if message.chat.id != -1001928271501:
        if await db.get_user_registration_status(message.chat.id) is True:
            new_menu = await create_main_menu()
            await bot.send_message(chat_id=message.chat.id, text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏", reply_markup=new_menu)


# —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
scheduler.add_job(mailing, 'cron', hour=9, minute=30, args=[bot, subject_names])

async def on_startup(_):
    print("Start Bot!")
    logger.info("start bot")
    await bot.send_message(chat_id=-1001928271501, text=f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')


async def on_shutdown(_):
    message = f'total messages: {total_messages}\n'
    all_users = await db.get_all_users()
    message += f'in bd: {len(all_users)}\n'
    message += f'new users: {count_new_users}\n'
    for key, val in activity.items():
        message += f"{key} - {val}   "
    
    await bot.send_message(chat_id=-1001928271501, text=f'–î–∞–Ω–Ω—ã–µ:\n' + message)
    await goodbye()
    print("Bot stopped")
    logger.info("bot stopped")
    await bot.send_message(chat_id=-1001928271501, text=f'–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


# –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–ª—ã–∫—É
if __name__ == "__main__":
    scheduler.start()
    dp.middleware.setup(ThrottlingMiddleware())
    executor.start_polling(dp, 
                           on_startup=on_startup,
                           on_shutdown=on_shutdown)
