"""–¢—É—Ç inline-–∫–Ω–æ–ø–∫–∏, –º–µ–Ω—é"""
import asyncio
from aiogram import types

from db import Database

db = Database()

asyncio.get_event_loop().run_until_complete(db.async_init())

# –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_answers = {
    "–û–ª–∏–º–ø–∏–∞–¥—ã": "–í—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–ª–∏–º–ø–∏–∞–¥—ã'",
    "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥": "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥ –≤—ã–∫–ª—é—á–µ–Ω–∞",
    "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥ –≤–∫–ª—é—á–µ–Ω–∞",
    "–•–∞–∫–∞—Ç–æ–Ω—ã": "–í—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ '–•–∞–∫–∞—Ç–æ–Ω—ã'",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "–í—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'",
    "–ö–æ–Ω—Ç–µ—Å—Ç—ã": "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ—Å—Ç—ã —Å —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º",
    "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤": "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–∞",
    "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": "–í—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
    "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'": "–í—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'",
    "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
    "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É": "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞",
    "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞",
}


"""–ú–µ–Ω—é"""
# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def create_main_menu():
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_olymp = types.KeyboardButton("–û–ª–∏–º–ø–∏–∞–¥—ã")
    btn_hacks = types.KeyboardButton("–•–∞–∫–∞—Ç–æ–Ω—ã")
    btn_prog = types.KeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
    btn_sett = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    btn_ts = types.KeyboardButton("–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    menu.add(btn_olymp, btn_hacks, btn_prog, btn_sett, btn_ts)
    return menu


# –º–µ–Ω—é –æ–ª–∏–º–ø–∏–∏–∞–¥
async def create_olympiads_menu(chat_id):
    if await db.check_teacher_status(chat_id):
        btn_list = types.KeyboardButton("–ò–∑–ºe–Ω–∏—Ç—å –∫–ª–∞—Å—Å") # –ø–µ—Ä–≤–∞—è –µ - –∞–Ω–≥–ª–∏–π—Å–∫–∞—è
    else:
        btn_list = types.KeyboardButton("–ò–∑–ºe–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã") # –ø–µ—Ä–≤–∞—è –µ - –∞–Ω–≥–ª–∏–π—Å–∫–∞—è
    btn_list_camps = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –ª–∞–≥–µ—Ä–µ–π")
    # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤–∑–∞)
    text_btn_mailing = "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥"
    if await db.get_mailing_olympiads_state(chat_id) is True:
        text_btn_mailing = "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ª–∏–º–ø–∏–∞–¥"
    btn_mailing = types.KeyboardButton(text_btn_mailing)
    btn_remind = types.KeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å üîî")
    btn_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    kb = [[btn_list, btn_list_camps, btn_mailing], [btn_remind], [btn_back]]
    menu = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return menu


# –º–µ–Ω—é —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤
async def create_hackathons_menu(chat_id):
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_list = types.KeyboardButton("–°–ø–∏—Å–æ–∫ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤")
    # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤–∑–∞)
    text_btn_mailing = "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤"
    if await db.get_mailing_hackathons_state(chat_id) is True:
        text_btn_mailing = "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤"
    btn_mailing = types.KeyboardButton(text_btn_mailing)
    btn_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    menu.add(btn_list, btn_mailing, btn_back)
    return menu


# –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–≤–∞–Ω–∏—è
async def create_prog_menu(chat_id):
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_training = types.KeyboardButton("–ö–æ–Ω—Ç–µ—Å—Ç—ã")
    btn_world = types.KeyboardButton("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–ª–∏–º–ø–∏a–¥—ã")
    btn_mailing = types.KeyboardButton("–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    if await db.get_mailing_status_of_programming(chat_id) is True:
        btn_mailing = types.KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    btn_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    menu.add(btn_training, btn_world, btn_mailing, btn_back)
    return menu


# –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–≤–∞–Ω–∏—è
async def create_training_menu(chat_id):
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_codeforces = types.KeyboardButton("Codeforces")
    btn_leetcode = types.KeyboardButton("LeetCode")
    btn_codefchef = types.KeyboardButton("CodeChef")
    btn_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'")
    menu.add(btn_codeforces, btn_leetcode, btn_codefchef, btn_back)
    return menu

# –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def create_settings_menu():
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å")
    btn2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
    btn3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    menu.add(btn1, btn2, btn3)
    return menu

# inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
async def create_class_markup_for_teacher(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    classes = ["8", "9", "10", "11"]
    for cl in classes:
        markup.add(types.InlineKeyboardButton(text=f"{'‚úÖ' if await db.get_class(chat_id, cl) else ''} {cl}", callback_data=cl))
    return markup

"""Inline-–∫–Ω–æ–ø–∫–∏"""
# inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
async def create_class_markup(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    classes = ["8", "9", "10", "11", "–ù–µ —à–∫–æ–ª—å–Ω–∏–∫", "–£—á–∏—Ç–µ–ª—å"]
    for cl in classes:
        markup.add(types.InlineKeyboardButton(text=f"{'‚úÖ' if await db.get_class(chat_id, cl) else ''} {cl}", callback_data=cl))
    return markup


# inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async def create_subjects_markup(chat_id, subject_names):
    markup = types.InlineKeyboardMarkup()
    subjects = subject_names.copy()
    cnt = 0  # —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ 3 —Å—Ç–æ–ª–±—Ü–∞
    arr = []
    for subj in subjects:
        if subj == "–ì–µ–Ω–µ—Ç–∏–∫–∞":  # –±–µ–∑ –≥–µ–Ω–µ—Ç–∏–∫–∏
            continue
        arr.append(types.InlineKeyboardButton(text=f"{'‚úÖ' if await db.get_sub(chat_id, subj) else ''} {subj}", callback_data=subj))
        cnt += 1
        if cnt == 3:
            markup.row(*arr)
            arr = []
            cnt = 0
    arr.append(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data='done'))
    if len(arr):
        markup.row(*arr)
    return markup

# inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–µ–Ω—é –æ–ª–∏–º–ø–∏–∞–¥ (–≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–∂–∏–º–∞—é –Ω–∞ –≥–æ—Ç–æ–≤–æ –Ω–∞—à–µ –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–ª–æ—Å—å)
async def create_subjects_markup_for_olympiads_menu(chat_id, subject_names):
    markup = types.InlineKeyboardMarkup()
    subjects = subject_names.copy()
    cnt = 0
    arr = []
    for subj in subjects:
        if subj == "–ì–µ–Ω–µ—Ç–∏–∫–∞":
            continue
        arr.append(types.InlineKeyboardButton(text=f"{'‚úÖ' if await db.get_sub(chat_id, subj) else ''} {subj}", callback_data=f"{subj}_for_olympiad_menu"))
        cnt += 1
        if cnt == 3:
            markup.row(*arr)
            arr = []
            cnt = 0
    arr.append(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤o", callback_data='done_from_olympiad_menu')) # (–ø–æ—Å–ª–µ–¥–Ω—è—è –æ - –∞–Ω–≥–ª–∏–π—Å–∫–∞—è)
    if len(arr):
        markup.row(*arr)
    return markup

# inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
async def create_class_markup_for_olympiads_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    classes = ["8", "9", "10", "11", "–ù–µ —à–∫–æ–ª—å–Ω–∏–∫", "–£—á–∏—Ç–µ–ª—å"]
    for cl in classes:
        markup.add(types.InlineKeyboardButton(text=cl, callback_data=f"{cl}_for_olympiad_menu"))
    return markup


async def create_mailing_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    mailing = ["–û–ª–∏–º–ø–∏–∞–¥—ã", "–•–∞–∫–∞—Ç–æ–Ω—ã", "–ò–≤–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é", "–ì–æ—Ç–æ–≤–æ"]
    markup.add(types.InlineKeyboardButton(text=f"{'‚úÖ' if await db.get_mailing_olympiads_state(chat_id) else '‚ùå'} –û–ª–∏–º–ø–∏–∞–¥—ã", callback_data=mailing[0]))
    markup.add(types.InlineKeyboardButton(text=f"{'‚úÖ' if await db.get_mailing_hackathons_state(chat_id) else '‚ùå'} –•–∞–∫–∞—Ç–æ–Ω—ã", callback_data=mailing[1]))
    markup.add(types.InlineKeyboardButton(text=f"{'‚úÖ' if await db.get_mailing_status_of_programming(chat_id) else '‚ùå'} –ò–≤–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=mailing[2]))
    markup.add(types.InlineKeyboardButton(text="‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data=mailing[3]))

    return markup


async def create_olimpiads_markup(chat_id, db):
    user_subjects = await db.get_users_subjects_names(chat_id)
    markup = types.InlineKeyboardMarkup()
    for subject in user_subjects:
        markup.add(types.InlineKeyboardButton(text=subject, callback_data="list_" + subject))
    
    return markup

# inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async def create_olimpiads_markup_for_teachers():
    subject_names = await db.get_subject_names() # —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    subject_names.sort()
    markup = types.InlineKeyboardMarkup()
    cnt = 0
    arr = []
    for subj in subject_names:
        if subj == "–ì–µ–Ω–µ—Ç–∏–∫–∞":
            continue
        arr.append(types.InlineKeyboardButton(text=subj, callback_data="list_" + subj))
        cnt += 1
        if cnt == 3:
            markup.row(*arr)
            arr = []
            cnt = 0
    if len(arr):
        markup.row(*arr)
    return markup

async def create_cancel_markup():
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    markup.add(cancel)
    return markup

async def create_remind_markup(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    days = ["1", "3", "7", "14"]
    for day in days:
        text = ""
        if await db.get_remind_day(chat_id, day):
            text += "‚úÖ "
        text += day
        markup.add(types.InlineKeyboardButton(text, callback_data="day_" + day))
    return markup

async def create_remind_markup_for_registration(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    days = ["1", "3", "7", "14"]
    for day in days:
        text = ""
        if await db.get_remind_day(chat_id, day):
            text += "‚úÖ "
        text += day
        markup.add(types.InlineKeyboardButton(text, callback_data="registration_day_" + day))
    markup.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="callback_end_registration"))
    return markup